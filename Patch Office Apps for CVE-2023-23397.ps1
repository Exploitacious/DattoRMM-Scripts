<#
TITLE: Patch Office Apps for CVE-2023-23397 [WIN]
PURPOSE: Script to patch our various versions of Office in one go.
CREATOR: Dan Meddock
CREATED: 21MAR2023
LAST UPDATED: 21MAR2023
#>

# Log Office Patching output to log file
Start-Transcript -Path "C:\temp\OfficeAppsPatch.log"

# Enable script execution
Set-ExecutionPolicy Bypass -Scope Process -Force

# Declarations
$tempFolder = "C:\Temp"

# Enable TLS 1.2 security protocol
Try{
	# Set TLS settings
	[Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072)
}Catch [system.exception] {
	write-host "- ERROR: Could not implement TLS 1.2 Support."
	write-host "  This can occur on Windows 7 devices lacking Service Pack 1."
	write-host "  Please install that before proceeding."
	Exit 1
}

# Uses VCredist PS module to uninstall all versions of VCredist
function GetPackageManagement {
	Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Confirm:$false
	Install-Module -Name PackageManagement -force -Confirm:$false
}

# Download and install Chocolatey
function InstallUpdateChoco {
    $bool = 0
    Try {
        if (!(Test-Path($env:ChocolateyInstall + "\choco.exe"))) {
			iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
        }
    }Catch{
        Write-Host $($_.Exception.Message)
    }
}

#Update Powershell
try{
	$ErrorActionPreference = "silentlycontinue"

	$PSVersionTable.PSVersion
	write-host "Attempting to update Powershell version now."
	InstallUpdateChoco
	choco install powershell -y
	choco upgrade powershell -y

	$ErrorActionPreference = "continue"
}catch{
	Write-Error $_.Exception.Message 
}


Try{
	# Check if Temp folder exists
	If(!(test-path $tempFolder -PathType Leaf)){new-item $tempFolder -ItemType Directory -force}
	
	# Install PSWindowsUpdate PowerShell module if needed
	If(!(Get-InstalledModule PSWindowsUpdate -ErrorAction silentlycontinue)){
		Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Confirm:$False -Force
		Set-PSRepository PSGallery -InstallationPolicy Trusted
		Install-Module PSWindowsUpdate -Confirm:$False -Force
	}else{
		Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Confirm:$False -Force
		Set-PSRepository PSGallery -InstallationPolicy Trusted
		Install-Module PSWindowsUpdate -Confirm:$False -Force
	}

	# Check for Office Click-To-Run Products
	$officeC2R = Get-ItemProperty `
	HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*, `
	HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | `
	Where-Object {$_.DisplayName -like "*Microsoft Office Professional Plus 2019*" `
	-or $_.DisplayName -like "*Microsoft Office Professional Plus 2021*" `
	-or $_.DisplayName -like "*Microsoft Office 365*" `
	-or $_.DisplayName -like "*Microsoft 365*"}

	# Update Click-To-Run Office Products (Office 2019, 2021, 365, etc)
	if ($officeC2R -ne $null) {
		$installedversion = $officeC2R.DisplayVersion
		$installedproduct = $officeC2R.DisplayName
		Write-Output "$installedproduct $installedversion installed."
		$channel = Get-ItemPropertyValue "HKLM:\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" -Name UpdateChannel
		if ($channel -eq 'http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60'){
			Write-Output "Current Channel"
			$version = '16.0.16130.20306'
		}
		elseif ($channel -eq 'http://officecdn.microsoft.com/pr/55336b82-a18d-4dd6-b5f6-9e5095c314a6'){
			Write-Output "Monthly Enterprise Channel"
			$version = '16.0.16026.20238'
		}
		elseif ($channel -eq 'http://officecdn.microsoft.com/pr/b8f9b850-328d-4355-9145-c59439a0c4cf'){
			Write-Output "Semi-Annual Enterprise Channel (Preview)"
			$version = '16.0.16130.20306'
		}
		elseif ($channel -eq 'http://officecdn.microsoft.com/pr/7ffbc6bf-bc32-4f92-8982-f9dd17fd3114'){
			Write-Output "Semi-Annual Enterprise Channel"
			$version = '16.0.15601.20578'
		}
		elseif ($channel -eq 'http://officecdn.microsoft.com/pr/f2e724c1-748f-4b47-8fb8-8e0d210e9208'){
			Write-Output "2019 Volume Licensed Channel"
			$version = '16.0.10395.20023'
		}
		elseif ($channel -eq 'http://officecdn.microsoft.com/pr/5030841d-c919-4594-8d2d-84ae4f96e58e'){
			Write-Output "LTSC 2021 Volume Licensed Channel"
			$version = '16.0.14332.20481'
		}else{
			Write-Output "Channel URL $channel not listed in script"
			$version = "N/A"
		}
		
		if ($version -ne "N/A") {
			if ($installedversion -lt $version){
				Write-Output "$installedproduct needs to be patched"
				Start-Process -WindowStyle hidden -FilePath "C:\Program Files\Common Files\microsoft shared\ClickToRun\OfficeC2RClient.exe" -ArgumentList "/update user updatepromptuser=false forceappshutdown=false displaylevel=true" -Wait
			}else{
				Write-Output "$installedproduct is up to date"
			}
		}
	}

	# The section below can be omitted if not using Office 2013 or 2016

	# Install PSWindowsUpdate PowerShell module if needed
	if (!(Get-Module -Name PSWindowsUpdate -ListAvailable)) {
		Write-Output "PSWindowsUpdate module not found. Installing module..."
		Install-Module -Name PSWindowsUpdate -Scope AllUsers -Force
		Import-Module -Name PSWindowsUpdate
	}else{
		Write-Output "PSWindowsUpdate module already installed."
	}

	# Temporarily disable WSUS
	$wsusRegPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
	$wsusValue = Get-ItemPropertyValue -Path '$wsusRegPath' -Name UseWUServer -ErrorAction SilentlyContinue
	if ($wsusValue -ne $null) {
		Write-Output "Disabling WSUS"
		Set-ItemProperty -Path $wsusRegPath -Name UseWUServer -Value 0
	}

	# Temporarily disable Windows Update for Business deferral period
	$wufbRegPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
	$wufbValue = (Get-ItemProperty -Path $wufbRegPath -Name DeferQualityUpdatesPeriodInDays -ErrorAction SilentlyContinue).DeferQualityUpdatesPeriodInDays
	if ($wufbValue -ne $null) {
		if ($wufbValue -ne 0) {
			Write-Output "Disabling Windows Update for Business deferral period"
			Set-ItemProperty -Path $wufbRegPath -Name DeferQualityUpdatesPeriodInDays -Value 0
		}else{
			Write-Output "WUfB deferral period already zero"
		}
	}

	# Check for Office 2013 and 2016
	$office2013 = Get-ItemProperty `
	HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*, `
	HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | `
	Where-Object {$_.DisplayName -like "*Microsoft Office Professional Plus 2013*"}

	$office2016 = Get-ItemProperty `
	HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*, `
	HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | `
	Where-Object {$_.DisplayName -like "*Microsoft Office Professional Plus 2016*"}


	# Check if Office 2013 is installed and if the KB5002265 update is installed
	if ($office2013 -ne $null) {
		$KB5002265_installed = Get-WindowsUpdate -KBArticleID KB5002265 -IsInstalled

		# If the KB5002265 update is not installed, install it
		if (!$KB5002265_installed) {
			Write-Output "Installing KB5002265 for Office 2013"
			Install-WindowsUpdate -KBArticleID KB5002265 -MicrosoftUpdate -IgnoreReboot -Verbose -Confirm:$false
		}else{
			Write-Output "No Outlook 2013 CVE-2023-23397 vulnerability"
		}
	}
	# Check if Office 2016 is installed and if the KB5002254 update is installed
	if ($office2016 -ne $null) {
		$KB5002254_installed = Get-WindowsUpdate -KBArticleID KB5002254 -IsInstalled

		# If the KB5002254 update is not installed, install it
		if (!$KB5002254_installed) {
			Write-Output "Installing KB5002254 for Office 2016"
			Install-WindowsUpdate -KBArticleID KB5002254 -MicrosoftUpdate -IgnoreReboot -Verbose -Confirm:$false
		}else{
			Write-Output "No Outlook 2016 CVE-2023-23397 vulnerability"
		}
	}

	# Return UseWUServer to previous value
	if ($wsusValue -ne $null) {
		Write-Output "Enabling WSUS"
		Set-ItemProperty -Path $wsusRegPath -Name UseWUServer -Value $wsusValue
	}

	# Return DeferQualityUpdatesPeriodInDays to previous value
	if ($wufbValue -ne $null) {
		Write-Output "Enabling Windows Update for Business deferral period"
		Set-ItemProperty -Path $wufbRegPath -Name DeferQualityUpdatesPeriodInDays -Value $wufbValue
	}

	# Reboot if any pending updates
	Get-WURebootStatus -AutoReboot
	#Get-WURebootStatus -scheduleReboot $(Get-Date "6PM")
}catch{
	Write-Host $($_.Exception.Message)
}

# Stop transcript logging
Stop-Transcript
Exit 0